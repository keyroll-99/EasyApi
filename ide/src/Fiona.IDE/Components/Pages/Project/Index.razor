@page "/project-editor/{namespace}/{name}"
@using Blazor.Diagrams.Core.Behaviors
@using Blazor.Diagrams.Core.Geometry
@using Blazor.Diagrams.Components
@using Fiona.IDE.Compiler
@using Fiona.IDE.ProjectManager
@using Fiona.IDE.ProjectManager.Models
@inject NavigationManager NavManager


<div class="configuration">
    <TextEdit @bind-Text="@CurrentFile.Class.Namespace"/>
    <TextEdit @bind-Text="@CurrentFile.Class.Name"/>
    <button @onclick="CompileFile">Compile File</button>
    <button @onclick="AddEndpoint">add endpoint</button>
</div>

<div class="diagram-container">
    <CascadingValue Value="Diagram" IsFixed="true">
        <DiagramCanvas></DiagramCanvas>
    </CascadingValue>
</div>

@code {

    [Inject]
    public IProjectManager ProjectManager { get; init; } = default!;

    [Inject]
    public ICompiler Compiler { get; init; } = default;

    [Parameter]
    public string? @namespace{ get; init; } = default;

    [Parameter]
    public string? name{ get; init; } = default;

    
    private ProjectFile CurrentFile { get; set; } = null!;

    private BlazorDiagram Diagram { get; set; } = null!;


    protected override void OnInitialized()
    {
        if (!ProjectManager.IsLoaded())
        {
            NavManager.NavigateTo("/");
        }
        
        CurrentFile = ProjectManager.GetProjectFileByNamespaceAndName(@namespace!, name!);
        
        BlazorDiagramOptions options = new()
        {
            AllowMultiSelection = true,
            Zoom =
            {
                Enabled = false,
            },
            Links =
            {
                DefaultRouter = new NormalRouter(),
                DefaultPathGenerator = new SmoothPathGenerator()
            },
        };


        Diagram = new BlazorDiagram(options);
        Diagram.UnregisterBehavior<SelectionBehavior>();
        Diagram.RegisterBehavior(new DiagramBehavior(Diagram));
    }

    protected override async Task OnParametersSetAsync()
    {
         base.OnParametersSet();
         await CurrentFile.Save();
         CurrentFile = ProjectManager.GetProjectFileByNamespaceAndName(@namespace!, name!);
    }

    private void AddEndpoint()
    {
        var node = new NodeModel(new Point(20, 20));
        node.AddPort(PortAlignment.Right);
        node.Title = "Controller";
        Diagram.Nodes.Add(node);
    }

    private void CompileFile()
    {
        Compiler.CompileFile(CurrentFile);
    }

}